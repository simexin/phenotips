<?xml version='1.0' encoding='UTF-8'?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>PanelsExport</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1480437911000</creationDate>
  <parent>PhenoTips.PatientSheet</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1480453680000</date>
  <contentUpdateDate>1480437911000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>PhenoTips.PanelsExport</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>0b3d26d4-223a-45ee-a54a-ad8fbe50276e</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe('xwiki:dom:loading', function() {
  document.observe('panels:export:requested', function(event) {
    var queryStr = event.memo &amp;&amp; event.memo.query;
    var service = event.memo &amp;&amp; event.memo.service;

    var query = [queryStr, "&amp;reqNo=", ++service.expectedReqNo].join("");

    new Ajax.Request(query, {
      method : 'GET',
      onSuccess : function(response) {
        saveData(response.responseJSON);
      },
      onFailure : function() {
        var errorMsg = "$escapetool.javascript($services.localization.render('phenotips.panels.panelsExport.error.exportFailed'))";
        this.$body._x_notification = new XWiki.widgets.Notification(errorMsg, "error");
      }
    });
  });

  var saveData = function(json) {
    if (!json || !json.genes || !json.size) {return;}

    var genes = json.genes;
    var size = json.size;
    if (!genes || !size) {return;}
    var headerElements = ["Gene symbol", "Gene ID", "Number of occurrences", "Features", "HPO IDs"];
    var csvContent = "data:text/csv;charset=utf-8, ";
    var csvArray = [headerElements.join("\t")];

    for (var i = 0; i &lt; size; i++) {
      csvArray.push(generateCsvRow(genes[i]));
    }

    csvContent += csvArray.join("\n");

    var fileName = generateFileName();
    generateSavePrompt(fileName, csvContent);
  }
  
  var generateCsvRow = function(element) {
    var lineArray = [];
    lineArray.push(element.gene_symbol);
    lineArray.push(element.gene_id);
    lineArray.push(element.count);
    lineArray.push(
      element.phenotypes.map(function(phenotype) {
        return phenotype.name;
      }).join("; "));
    lineArray.push(
      element.phenotypes.map(function(phenotype) {
        return phenotype.id;
      }).join("; "));
    return lineArray.join("\t");
  };

  var generateFileName = function() {
    var currentDate = new Date(new Date().getTime());
    return "phenotips_" 
      + currentDate.getFullYear() 
      + "-" + currentDate.getMonth() 
      + "-" + currentDate.getDate() 
      + "_" + currentDate.getHours() 
      + "-" + currentDate.getMinutes() + ".tsv";
  };

  var generateSavePrompt = function(fileName, csvContent) {
    var encodedUri = encodeURI(csvContent);
    var link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", fileName);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
});</code>
    </property>
    <property>
      <name>Download gene panels data as TSV</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
